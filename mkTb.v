//
// Generated by Bluespec Compiler, version 2012.01.A (build 26572, 2012-01-17)
//
// On Fri Feb 27 14:11:30 GMT 2015
//
// Method conflict info:
// (none)
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkTb(CLK,
	    RST_N);
  input  CLK;
  input  RST_N;

  // register clk_counter
  reg [31 : 0] clk_counter;
  wire [31 : 0] clk_counter$D_IN;
  wire clk_counter$EN;

  // ports of submodule alu
  wire [31 : 0] alu$calc, alu$calc_op1, alu$calc_op2;
  wire [2 : 0] alu$calc_fun;

  // ports of submodule dec
  wire [31 : 0] dec$decode_instruction;
  wire [9 : 0] dec$decode;

  // ports of submodule dmem
  wire [31 : 0] dmem$read_port_addr, dmem$write_addr, dmem$write_value;
  wire dmem$EN_write;

  // ports of submodule regfile
  wire [31 : 0] regfile$read_port1, regfile$write_value;
  wire [4 : 0] regfile$read_port1_addr,
	       regfile$read_port2_addr,
	       regfile$write_addr;
  wire regfile$EN_write;

  // remaining internal signals
  wire [19 : 0] _0b1000__q1;

  // submodule alu
  mkALU alu(.CLK(CLK),
	    .RST_N(RST_N),
	    .calc_fun(alu$calc_fun),
	    .calc_op1(alu$calc_op1),
	    .calc_op2(alu$calc_op2),
	    .calc(alu$calc),
	    .RDY_calc());

  // submodule dec
  mkDecode dec(.CLK(CLK),
	       .RST_N(RST_N),
	       .decode_instruction(dec$decode_instruction),
	       .decode(dec$decode),
	       .RDY_decode());

  // submodule dmem
  mkDmem dmem(.CLK(CLK),
	      .RST_N(RST_N),
	      .read_port_addr(dmem$read_port_addr),
	      .write_addr(dmem$write_addr),
	      .write_value(dmem$write_value),
	      .EN_write(dmem$EN_write),
	      .read_port(),
	      .RDY_read_port(),
	      .RDY_write());

  // submodule regfile
  mkRegFile regfile(.CLK(CLK),
		    .RST_N(RST_N),
		    .read_port1_addr(regfile$read_port1_addr),
		    .read_port2_addr(regfile$read_port2_addr),
		    .write_addr(regfile$write_addr),
		    .write_value(regfile$write_value),
		    .EN_write(regfile$EN_write),
		    .read_port1(regfile$read_port1),
		    .RDY_read_port1(),
		    .read_port2(),
		    .RDY_read_port2(),
		    .RDY_write());

  // register clk_counter
  assign clk_counter$D_IN = clk_counter + 32'd1 ;
  assign clk_counter$EN = 1'd1 ;

  // submodule alu
  assign alu$calc_fun = 3'd3 ;
  assign alu$calc_op1 =
	     dec$decode[7] ?
	       (dec$decode[7] ?
		  { {12{_0b1000__q1[19]}}, _0b1000__q1 } :
		  32'd0) :
	       regfile$read_port1 ;
  assign alu$calc_op2 = 32'd5 ;

  // submodule dec
  assign dec$decode_instruction = 32'b00000000000000001000000000000011 ;

  // submodule dmem
  assign dmem$read_port_addr = 32'h0 ;
  assign dmem$write_addr = 32'h0 ;
  assign dmem$write_value = 32'h0 ;
  assign dmem$EN_write = 1'b0 ;

  // submodule regfile
  assign regfile$read_port1_addr = 5'b00001 ;
  assign regfile$read_port2_addr = 5'b0 ;
  assign regfile$write_addr = 5'h0 ;
  assign regfile$write_value = 32'h0 ;
  assign regfile$EN_write = 1'b0 ;

  // remaining internal signals
  assign _0b1000__q1 = 20'b00000000000000001000 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        clk_counter <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (clk_counter$EN)
	  clk_counter <= `BSV_ASSIGNMENT_DELAY clk_counter$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    clk_counter = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N)
      if (clk_counter == 32'd11)
	$display(" Exiting at Clock -> %d \n", $signed(clk_counter));
    if (RST_N) if (clk_counter == 32'd11) $finish(32'd0);
    if (RST_N) $display(" At Clock -> %d \n", $signed(clk_counter));
    if (RST_N) $display(" RS1 = %d \n", regfile$read_port1);
    if (RST_N)
      $display(" Control Signals are: \n   \t op2sel = %x \n   \t op1sel = %x \n   \t alufun = %x \n   \t rf_wen  = %x \n   \t wb_sel = %x \n   \t dmem_wen = %x \n",
	       dec$decode[9:8],
	       dec$decode[7],
	       dec$decode[6:4],
	       dec$decode[1],
	       dec$decode[3:2],
	       dec$decode[0]);
    if (RST_N) $display("Finished Decoding -> Cont Signal = %d\n", alu$calc);
  end
  // synopsys translate_on
endmodule  // mkTb

