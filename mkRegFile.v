//
// Generated by Bluespec Compiler, version 2012.01.A (build 26572, 2012-01-17)
//
// On Fri Feb 27 13:56:32 GMT 2015
//
// Method conflict info:
// Method: read_port1
// Conflict-free: read_port1, read_port2
// Sequenced before: write
//
// Method: read_port2
// Conflict-free: read_port1, read_port2
// Sequenced before: write
//
// Method: write
// Sequenced before (restricted): write
// Sequenced after: read_port1, read_port2
//
//
// Ports:
// Name                         I/O  size props
// read_port1                     O    32
// RDY_read_port1                 O     1 const
// read_port2                     O    32
// RDY_read_port2                 O     1 const
// RDY_write                      O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// read_port1_addr                I     5
// read_port2_addr                I     5
// write_addr                     I     5
// write_value                    I    32 reg
// EN_write                       I     1
//
// Combinational paths from inputs to outputs:
//   read_port1_addr -> read_port1
//   read_port2_addr -> read_port2
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkRegFile(CLK,
		 RST_N,

		 read_port1_addr,
		 read_port1,
		 RDY_read_port1,

		 read_port2_addr,
		 read_port2,
		 RDY_read_port2,

		 write_addr,
		 write_value,
		 EN_write,
		 RDY_write);
  input  CLK;
  input  RST_N;

  // value method read_port1
  input  [4 : 0] read_port1_addr;
  output [31 : 0] read_port1;
  output RDY_read_port1;

  // value method read_port2
  input  [4 : 0] read_port2_addr;
  output [31 : 0] read_port2;
  output RDY_read_port2;

  // action method write
  input  [4 : 0] write_addr;
  input  [31 : 0] write_value;
  input  EN_write;
  output RDY_write;

  // signals for module outputs
  reg [31 : 0] read_port1, read_port2;
  wire RDY_read_port1, RDY_read_port2, RDY_write;

  // register regFile_0
  reg [31 : 0] regFile_0;
  wire [31 : 0] regFile_0$D_IN;
  wire regFile_0$EN;

  // register regFile_0_1
  reg [31 : 0] regFile_0_1;
  wire [31 : 0] regFile_0_1$D_IN;
  wire regFile_0_1$EN;

  // register regFile_1
  reg [31 : 0] regFile_1;
  wire [31 : 0] regFile_1$D_IN;
  wire regFile_1$EN;

  // register regFile_10
  reg [31 : 0] regFile_10;
  wire [31 : 0] regFile_10$D_IN;
  wire regFile_10$EN;

  // register regFile_11
  reg [31 : 0] regFile_11;
  wire [31 : 0] regFile_11$D_IN;
  wire regFile_11$EN;

  // register regFile_12
  reg [31 : 0] regFile_12;
  wire [31 : 0] regFile_12$D_IN;
  wire regFile_12$EN;

  // register regFile_13
  reg [31 : 0] regFile_13;
  wire [31 : 0] regFile_13$D_IN;
  wire regFile_13$EN;

  // register regFile_14
  reg [31 : 0] regFile_14;
  wire [31 : 0] regFile_14$D_IN;
  wire regFile_14$EN;

  // register regFile_15
  reg [31 : 0] regFile_15;
  wire [31 : 0] regFile_15$D_IN;
  wire regFile_15$EN;

  // register regFile_16
  reg [31 : 0] regFile_16;
  wire [31 : 0] regFile_16$D_IN;
  wire regFile_16$EN;

  // register regFile_17
  reg [31 : 0] regFile_17;
  wire [31 : 0] regFile_17$D_IN;
  wire regFile_17$EN;

  // register regFile_18
  reg [31 : 0] regFile_18;
  wire [31 : 0] regFile_18$D_IN;
  wire regFile_18$EN;

  // register regFile_19
  reg [31 : 0] regFile_19;
  wire [31 : 0] regFile_19$D_IN;
  wire regFile_19$EN;

  // register regFile_2
  reg [31 : 0] regFile_2;
  wire [31 : 0] regFile_2$D_IN;
  wire regFile_2$EN;

  // register regFile_20
  reg [31 : 0] regFile_20;
  wire [31 : 0] regFile_20$D_IN;
  wire regFile_20$EN;

  // register regFile_21
  reg [31 : 0] regFile_21;
  wire [31 : 0] regFile_21$D_IN;
  wire regFile_21$EN;

  // register regFile_22
  reg [31 : 0] regFile_22;
  wire [31 : 0] regFile_22$D_IN;
  wire regFile_22$EN;

  // register regFile_23
  reg [31 : 0] regFile_23;
  wire [31 : 0] regFile_23$D_IN;
  wire regFile_23$EN;

  // register regFile_24
  reg [31 : 0] regFile_24;
  wire [31 : 0] regFile_24$D_IN;
  wire regFile_24$EN;

  // register regFile_25
  reg [31 : 0] regFile_25;
  wire [31 : 0] regFile_25$D_IN;
  wire regFile_25$EN;

  // register regFile_26
  reg [31 : 0] regFile_26;
  wire [31 : 0] regFile_26$D_IN;
  wire regFile_26$EN;

  // register regFile_27
  reg [31 : 0] regFile_27;
  wire [31 : 0] regFile_27$D_IN;
  wire regFile_27$EN;

  // register regFile_28
  reg [31 : 0] regFile_28;
  wire [31 : 0] regFile_28$D_IN;
  wire regFile_28$EN;

  // register regFile_29
  reg [31 : 0] regFile_29;
  wire [31 : 0] regFile_29$D_IN;
  wire regFile_29$EN;

  // register regFile_3
  reg [31 : 0] regFile_3;
  wire [31 : 0] regFile_3$D_IN;
  wire regFile_3$EN;

  // register regFile_30
  reg [31 : 0] regFile_30;
  wire [31 : 0] regFile_30$D_IN;
  wire regFile_30$EN;

  // register regFile_4
  reg [31 : 0] regFile_4;
  wire [31 : 0] regFile_4$D_IN;
  wire regFile_4$EN;

  // register regFile_5
  reg [31 : 0] regFile_5;
  wire [31 : 0] regFile_5$D_IN;
  wire regFile_5$EN;

  // register regFile_6
  reg [31 : 0] regFile_6;
  wire [31 : 0] regFile_6$D_IN;
  wire regFile_6$EN;

  // register regFile_7
  reg [31 : 0] regFile_7;
  wire [31 : 0] regFile_7$D_IN;
  wire regFile_7$EN;

  // register regFile_8
  reg [31 : 0] regFile_8;
  wire [31 : 0] regFile_8$D_IN;
  wire regFile_8$EN;

  // register regFile_9
  reg [31 : 0] regFile_9;
  wire [31 : 0] regFile_9$D_IN;
  wire regFile_9$EN;

  // value method read_port1
  always@(read_port1_addr or
	  regFile_30 or
	  regFile_0_1 or
	  regFile_1 or
	  regFile_2 or
	  regFile_3 or
	  regFile_4 or
	  regFile_5 or
	  regFile_6 or
	  regFile_7 or
	  regFile_8 or
	  regFile_9 or
	  regFile_10 or
	  regFile_11 or
	  regFile_12 or
	  regFile_13 or
	  regFile_14 or
	  regFile_15 or
	  regFile_16 or
	  regFile_17 or
	  regFile_18 or
	  regFile_19 or
	  regFile_20 or
	  regFile_21 or
	  regFile_22 or
	  regFile_23 or
	  regFile_24 or
	  regFile_25 or regFile_26 or regFile_27 or regFile_28 or regFile_29)
  begin
    case (read_port1_addr)
      5'd0: read_port1 = 32'd0;
      5'd1: read_port1 = regFile_0_1;
      5'd2: read_port1 = regFile_1;
      5'd3: read_port1 = regFile_2;
      5'd4: read_port1 = regFile_3;
      5'd5: read_port1 = regFile_4;
      5'd6: read_port1 = regFile_5;
      5'd7: read_port1 = regFile_6;
      5'd8: read_port1 = regFile_7;
      5'd9: read_port1 = regFile_8;
      5'd10: read_port1 = regFile_9;
      5'd11: read_port1 = regFile_10;
      5'd12: read_port1 = regFile_11;
      5'd13: read_port1 = regFile_12;
      5'd14: read_port1 = regFile_13;
      5'd15: read_port1 = regFile_14;
      5'd16: read_port1 = regFile_15;
      5'd17: read_port1 = regFile_16;
      5'd18: read_port1 = regFile_17;
      5'd19: read_port1 = regFile_18;
      5'd20: read_port1 = regFile_19;
      5'd21: read_port1 = regFile_20;
      5'd22: read_port1 = regFile_21;
      5'd23: read_port1 = regFile_22;
      5'd24: read_port1 = regFile_23;
      5'd25: read_port1 = regFile_24;
      5'd26: read_port1 = regFile_25;
      5'd27: read_port1 = regFile_26;
      5'd28: read_port1 = regFile_27;
      5'd29: read_port1 = regFile_28;
      5'd30: read_port1 = regFile_29;
      5'd31: read_port1 = regFile_30;
    endcase
  end
  assign RDY_read_port1 = 1'd1 ;

  // value method read_port2
  always@(read_port2_addr or
	  regFile_30 or
	  regFile_0_1 or
	  regFile_1 or
	  regFile_2 or
	  regFile_3 or
	  regFile_4 or
	  regFile_5 or
	  regFile_6 or
	  regFile_7 or
	  regFile_8 or
	  regFile_9 or
	  regFile_10 or
	  regFile_11 or
	  regFile_12 or
	  regFile_13 or
	  regFile_14 or
	  regFile_15 or
	  regFile_16 or
	  regFile_17 or
	  regFile_18 or
	  regFile_19 or
	  regFile_20 or
	  regFile_21 or
	  regFile_22 or
	  regFile_23 or
	  regFile_24 or
	  regFile_25 or regFile_26 or regFile_27 or regFile_28 or regFile_29)
  begin
    case (read_port2_addr)
      5'd0: read_port2 = 32'd0;
      5'd1: read_port2 = regFile_0_1;
      5'd2: read_port2 = regFile_1;
      5'd3: read_port2 = regFile_2;
      5'd4: read_port2 = regFile_3;
      5'd5: read_port2 = regFile_4;
      5'd6: read_port2 = regFile_5;
      5'd7: read_port2 = regFile_6;
      5'd8: read_port2 = regFile_7;
      5'd9: read_port2 = regFile_8;
      5'd10: read_port2 = regFile_9;
      5'd11: read_port2 = regFile_10;
      5'd12: read_port2 = regFile_11;
      5'd13: read_port2 = regFile_12;
      5'd14: read_port2 = regFile_13;
      5'd15: read_port2 = regFile_14;
      5'd16: read_port2 = regFile_15;
      5'd17: read_port2 = regFile_16;
      5'd18: read_port2 = regFile_17;
      5'd19: read_port2 = regFile_18;
      5'd20: read_port2 = regFile_19;
      5'd21: read_port2 = regFile_20;
      5'd22: read_port2 = regFile_21;
      5'd23: read_port2 = regFile_22;
      5'd24: read_port2 = regFile_23;
      5'd25: read_port2 = regFile_24;
      5'd26: read_port2 = regFile_25;
      5'd27: read_port2 = regFile_26;
      5'd28: read_port2 = regFile_27;
      5'd29: read_port2 = regFile_28;
      5'd30: read_port2 = regFile_29;
      5'd31: read_port2 = regFile_30;
    endcase
  end
  assign RDY_read_port2 = 1'd1 ;

  // action method write
  assign RDY_write = 1'd1 ;

  // register regFile_0
  assign regFile_0$D_IN = 32'h0 ;
  assign regFile_0$EN = 1'b0 ;

  // register regFile_0_1
  assign regFile_0_1$D_IN = write_value ;
  assign regFile_0_1$EN = EN_write && write_addr == 5'd1 ;

  // register regFile_1
  assign regFile_1$D_IN = write_value ;
  assign regFile_1$EN = EN_write && write_addr == 5'd2 ;

  // register regFile_10
  assign regFile_10$D_IN = write_value ;
  assign regFile_10$EN = EN_write && write_addr == 5'd11 ;

  // register regFile_11
  assign regFile_11$D_IN = write_value ;
  assign regFile_11$EN = EN_write && write_addr == 5'd12 ;

  // register regFile_12
  assign regFile_12$D_IN = write_value ;
  assign regFile_12$EN = EN_write && write_addr == 5'd13 ;

  // register regFile_13
  assign regFile_13$D_IN = write_value ;
  assign regFile_13$EN = EN_write && write_addr == 5'd14 ;

  // register regFile_14
  assign regFile_14$D_IN = write_value ;
  assign regFile_14$EN = EN_write && write_addr == 5'd15 ;

  // register regFile_15
  assign regFile_15$D_IN = write_value ;
  assign regFile_15$EN = EN_write && write_addr == 5'd16 ;

  // register regFile_16
  assign regFile_16$D_IN = write_value ;
  assign regFile_16$EN = EN_write && write_addr == 5'd17 ;

  // register regFile_17
  assign regFile_17$D_IN = write_value ;
  assign regFile_17$EN = EN_write && write_addr == 5'd18 ;

  // register regFile_18
  assign regFile_18$D_IN = write_value ;
  assign regFile_18$EN = EN_write && write_addr == 5'd19 ;

  // register regFile_19
  assign regFile_19$D_IN = write_value ;
  assign regFile_19$EN = EN_write && write_addr == 5'd20 ;

  // register regFile_2
  assign regFile_2$D_IN = write_value ;
  assign regFile_2$EN = EN_write && write_addr == 5'd3 ;

  // register regFile_20
  assign regFile_20$D_IN = write_value ;
  assign regFile_20$EN = EN_write && write_addr == 5'd21 ;

  // register regFile_21
  assign regFile_21$D_IN = write_value ;
  assign regFile_21$EN = EN_write && write_addr == 5'd22 ;

  // register regFile_22
  assign regFile_22$D_IN = write_value ;
  assign regFile_22$EN = EN_write && write_addr == 5'd23 ;

  // register regFile_23
  assign regFile_23$D_IN = write_value ;
  assign regFile_23$EN = EN_write && write_addr == 5'd24 ;

  // register regFile_24
  assign regFile_24$D_IN = write_value ;
  assign regFile_24$EN = EN_write && write_addr == 5'd25 ;

  // register regFile_25
  assign regFile_25$D_IN = write_value ;
  assign regFile_25$EN = EN_write && write_addr == 5'd26 ;

  // register regFile_26
  assign regFile_26$D_IN = write_value ;
  assign regFile_26$EN = EN_write && write_addr == 5'd27 ;

  // register regFile_27
  assign regFile_27$D_IN = write_value ;
  assign regFile_27$EN = EN_write && write_addr == 5'd28 ;

  // register regFile_28
  assign regFile_28$D_IN = write_value ;
  assign regFile_28$EN = EN_write && write_addr == 5'd29 ;

  // register regFile_29
  assign regFile_29$D_IN = write_value ;
  assign regFile_29$EN = EN_write && write_addr == 5'd30 ;

  // register regFile_3
  assign regFile_3$D_IN = write_value ;
  assign regFile_3$EN = EN_write && write_addr == 5'd4 ;

  // register regFile_30
  assign regFile_30$D_IN = write_value ;
  assign regFile_30$EN = EN_write && write_addr == 5'd31 ;

  // register regFile_4
  assign regFile_4$D_IN = write_value ;
  assign regFile_4$EN = EN_write && write_addr == 5'd5 ;

  // register regFile_5
  assign regFile_5$D_IN = write_value ;
  assign regFile_5$EN = EN_write && write_addr == 5'd6 ;

  // register regFile_6
  assign regFile_6$D_IN = write_value ;
  assign regFile_6$EN = EN_write && write_addr == 5'd7 ;

  // register regFile_7
  assign regFile_7$D_IN = write_value ;
  assign regFile_7$EN = EN_write && write_addr == 5'd8 ;

  // register regFile_8
  assign regFile_8$D_IN = write_value ;
  assign regFile_8$EN = EN_write && write_addr == 5'd9 ;

  // register regFile_9
  assign regFile_9$D_IN = write_value ;
  assign regFile_9$EN = EN_write && write_addr == 5'd10 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        regFile_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regFile_0_1 <= `BSV_ASSIGNMENT_DELAY 32'd1;
	regFile_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regFile_10 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regFile_11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regFile_12 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regFile_13 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regFile_14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regFile_15 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regFile_16 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regFile_17 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regFile_18 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regFile_19 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regFile_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regFile_20 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regFile_21 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regFile_22 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regFile_23 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regFile_24 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regFile_25 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regFile_26 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regFile_27 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regFile_28 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regFile_29 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regFile_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regFile_30 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regFile_4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regFile_5 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regFile_6 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regFile_7 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regFile_8 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regFile_9 <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (regFile_0$EN) regFile_0 <= `BSV_ASSIGNMENT_DELAY regFile_0$D_IN;
	if (regFile_0_1$EN)
	  regFile_0_1 <= `BSV_ASSIGNMENT_DELAY regFile_0_1$D_IN;
	if (regFile_1$EN) regFile_1 <= `BSV_ASSIGNMENT_DELAY regFile_1$D_IN;
	if (regFile_10$EN)
	  regFile_10 <= `BSV_ASSIGNMENT_DELAY regFile_10$D_IN;
	if (regFile_11$EN)
	  regFile_11 <= `BSV_ASSIGNMENT_DELAY regFile_11$D_IN;
	if (regFile_12$EN)
	  regFile_12 <= `BSV_ASSIGNMENT_DELAY regFile_12$D_IN;
	if (regFile_13$EN)
	  regFile_13 <= `BSV_ASSIGNMENT_DELAY regFile_13$D_IN;
	if (regFile_14$EN)
	  regFile_14 <= `BSV_ASSIGNMENT_DELAY regFile_14$D_IN;
	if (regFile_15$EN)
	  regFile_15 <= `BSV_ASSIGNMENT_DELAY regFile_15$D_IN;
	if (regFile_16$EN)
	  regFile_16 <= `BSV_ASSIGNMENT_DELAY regFile_16$D_IN;
	if (regFile_17$EN)
	  regFile_17 <= `BSV_ASSIGNMENT_DELAY regFile_17$D_IN;
	if (regFile_18$EN)
	  regFile_18 <= `BSV_ASSIGNMENT_DELAY regFile_18$D_IN;
	if (regFile_19$EN)
	  regFile_19 <= `BSV_ASSIGNMENT_DELAY regFile_19$D_IN;
	if (regFile_2$EN) regFile_2 <= `BSV_ASSIGNMENT_DELAY regFile_2$D_IN;
	if (regFile_20$EN)
	  regFile_20 <= `BSV_ASSIGNMENT_DELAY regFile_20$D_IN;
	if (regFile_21$EN)
	  regFile_21 <= `BSV_ASSIGNMENT_DELAY regFile_21$D_IN;
	if (regFile_22$EN)
	  regFile_22 <= `BSV_ASSIGNMENT_DELAY regFile_22$D_IN;
	if (regFile_23$EN)
	  regFile_23 <= `BSV_ASSIGNMENT_DELAY regFile_23$D_IN;
	if (regFile_24$EN)
	  regFile_24 <= `BSV_ASSIGNMENT_DELAY regFile_24$D_IN;
	if (regFile_25$EN)
	  regFile_25 <= `BSV_ASSIGNMENT_DELAY regFile_25$D_IN;
	if (regFile_26$EN)
	  regFile_26 <= `BSV_ASSIGNMENT_DELAY regFile_26$D_IN;
	if (regFile_27$EN)
	  regFile_27 <= `BSV_ASSIGNMENT_DELAY regFile_27$D_IN;
	if (regFile_28$EN)
	  regFile_28 <= `BSV_ASSIGNMENT_DELAY regFile_28$D_IN;
	if (regFile_29$EN)
	  regFile_29 <= `BSV_ASSIGNMENT_DELAY regFile_29$D_IN;
	if (regFile_3$EN) regFile_3 <= `BSV_ASSIGNMENT_DELAY regFile_3$D_IN;
	if (regFile_30$EN)
	  regFile_30 <= `BSV_ASSIGNMENT_DELAY regFile_30$D_IN;
	if (regFile_4$EN) regFile_4 <= `BSV_ASSIGNMENT_DELAY regFile_4$D_IN;
	if (regFile_5$EN) regFile_5 <= `BSV_ASSIGNMENT_DELAY regFile_5$D_IN;
	if (regFile_6$EN) regFile_6 <= `BSV_ASSIGNMENT_DELAY regFile_6$D_IN;
	if (regFile_7$EN) regFile_7 <= `BSV_ASSIGNMENT_DELAY regFile_7$D_IN;
	if (regFile_8$EN) regFile_8 <= `BSV_ASSIGNMENT_DELAY regFile_8$D_IN;
	if (regFile_9$EN) regFile_9 <= `BSV_ASSIGNMENT_DELAY regFile_9$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    regFile_0 = 32'hAAAAAAAA;
    regFile_0_1 = 32'hAAAAAAAA;
    regFile_1 = 32'hAAAAAAAA;
    regFile_10 = 32'hAAAAAAAA;
    regFile_11 = 32'hAAAAAAAA;
    regFile_12 = 32'hAAAAAAAA;
    regFile_13 = 32'hAAAAAAAA;
    regFile_14 = 32'hAAAAAAAA;
    regFile_15 = 32'hAAAAAAAA;
    regFile_16 = 32'hAAAAAAAA;
    regFile_17 = 32'hAAAAAAAA;
    regFile_18 = 32'hAAAAAAAA;
    regFile_19 = 32'hAAAAAAAA;
    regFile_2 = 32'hAAAAAAAA;
    regFile_20 = 32'hAAAAAAAA;
    regFile_21 = 32'hAAAAAAAA;
    regFile_22 = 32'hAAAAAAAA;
    regFile_23 = 32'hAAAAAAAA;
    regFile_24 = 32'hAAAAAAAA;
    regFile_25 = 32'hAAAAAAAA;
    regFile_26 = 32'hAAAAAAAA;
    regFile_27 = 32'hAAAAAAAA;
    regFile_28 = 32'hAAAAAAAA;
    regFile_29 = 32'hAAAAAAAA;
    regFile_3 = 32'hAAAAAAAA;
    regFile_30 = 32'hAAAAAAAA;
    regFile_4 = 32'hAAAAAAAA;
    regFile_5 = 32'hAAAAAAAA;
    regFile_6 = 32'hAAAAAAAA;
    regFile_7 = 32'hAAAAAAAA;
    regFile_8 = 32'hAAAAAAAA;
    regFile_9 = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkRegFile

